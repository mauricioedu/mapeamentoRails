<script src="//maps.google.com/maps/api/js?key=AIzaSyCXqZ9I8R1mGzeINjUnm8tmdy7E3Iutd1k"></script>
<script src="//cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js"></script>
<script src='//cdn.rawgit.com/printercu/google-maps-utility-library-v3-read-only/master/infobox/src/infobox_packed.js' type='text/javascript'></script> <!-- only if you need custom infoboxes -->


<div class="page-header">
  <button type="button" class="btn btn-info" id="rotas">Alinhar</button>
  <button type="button" class="btn btn-info" id="mapear">Área Alcançada</button>
  <%= link_to new_user_path, class: 'btn btn-danger' do %>
    <span class="glyphicon glyphicon-plus"></span>
    Nova Célula
  <% end %>

  <h1>Lista de Células</h1>
</div>

<div id="border"style='width: 800px;'>
  <div id="map" style='width: 1140px; height: 400px;'></div>
</div>

<div class="table-responsive">
  <table class="table table-striped table-bordered table-hover">
    <thead>
      <tr>
            <th>Latitude</th>
            <th>Longitude</th>
            <th>Lider</th>
            <th>Endereço</th>
            <th>Célula</th>
            <th></th>
        <th></th>
        <th></th>
      </tr>
    </thead>

    <tbody>
      <%= content_tag_for(:tr, @users) do |user| %>
            <td><%= user.latitude %></td>
            <td><%= user.longitude %></td>
            <td><%= user.name %></td>
            <td><%= user.address %></td>
            <td><%= user.title %></td>
            <td><%= link_to 'Show', user %></td>
        <td><%= link_to 'Editar', edit_user_path(user) %></td>
        <td><%= link_to 'Deletar', user, method: :delete, data: { confirm: 'Você tem certeza?' } %></td>
      <% end %>
    </tbody>
  </table>
</div>






<script type="text/javascript">
handler = Gmaps.build('Google');
handler.buildMap({ provider: {styles: [
  {
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#ebe3cd"
      }
    ]
  },
  {
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#523735"
      }
    ]
  },
  {
    "elementType": "labels.text.stroke",
    "stylers": [
      {
        "color": "#f5f1e6"
      }
    ]
  },
  {
    "featureType": "administrative",
    "elementType": "geometry.stroke",
    "stylers": [
      {
        "color": "#c9b2a6"
      }
    ]
  },
  {
    "featureType": "administrative.land_parcel",
    "elementType": "geometry.stroke",
    "stylers": [
      {
        "color": "#dcd2be"
      }
    ]
  },
  {
    "featureType": "administrative.land_parcel",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#ae9e90"
      }
    ]
  },
  {
    "featureType": "landscape.natural",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#dfd2ae"
      }
    ]
  },
  {
    "featureType": "poi",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#dfd2ae"
      }
    ]
  },
  {
    "featureType": "poi",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#93817c"
      }
    ]
  },
  {
    "featureType": "poi.park",
    "elementType": "geometry.fill",
    "stylers": [
      {
        "color": "#a5b076"
      }
    ]
  },
  {
    "featureType": "poi.park",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#447530"
      }
    ]
  },
  {
    "featureType": "road",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#f5f1e6"
      }
    ]
  },
  {
    "featureType": "road.arterial",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#fdfcf8"
      }
    ]
  },
  {
    "featureType": "road.highway",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#f8c967"
      }
    ]
  },
  {
    "featureType": "road.highway",
    "elementType": "geometry.stroke",
    "stylers": [
      {
        "color": "#e9bc62"
      }
    ]
  },
  {
    "featureType": "road.highway.controlled_access",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#e98d58"
      }
    ]
  },
  {
    "featureType": "road.highway.controlled_access",
    "elementType": "geometry.stroke",
    "stylers": [
      {
        "color": "#db8555"
      }
    ]
  },
  {
    "featureType": "road.local",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#806b63"
      }
    ]
  },
  {
    "featureType": "transit.line",
    "stylers": [
      {
        "color": "#000000"
      },
      {
        "saturation": 80
      },
      {
        "lightness": 45
      },
      {
        "visibility": "on"
      }
    ]
  },
  {
    "featureType": "transit.line",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#dfd2ae"
      }
    ]
  },
  {
    "featureType": "transit.line",
    "elementType": "geometry.fill",
    "stylers": [
      {
        "weight": 4.5
      }
    ]
  },
  {
    "featureType": "transit.line",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#8f7d77"
      }
    ]
  },
  {
    "featureType": "transit.line",
    "elementType": "labels.text.stroke",
    "stylers": [
      {
        "color": "#ebe3cd"
      }
    ]
  },
  {
    "featureType": "transit.station",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#dfd2ae"
      }
    ]
  },
  {
    "featureType": "water",
    "elementType": "geometry.fill",
    "stylers": [
      {
        "color": "#b9d3c2"
      }
    ]
  },
  {
    "featureType": "water",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#92998d"
      }
    ]
  }
]}, internal: {id: 'map'}}, function(){



 $("#rotas").click(function(){
   var polylines = handler.addPolylines(
     [
       (<%=raw @hash.to_json %>)
      ]
    ,
    { strokeColor: '#FF0000'}
  );
});


$("#mapear").click(function(){
   var polygons = handler.addPolygons(
      [
          (<%=raw @hash.to_json %>)
      ],
      { strokeColor: '#FF0000'}
    );
});


  markers = handler.addMarkers(<%=raw @hash.to_json %>);
  handler.bounds.extendWith(polygons);
  handler.bounds.extendWith(polylines);
  handler.bounds.extendWith(markers);
  handler.fitMapToBounds();
});


</script>
